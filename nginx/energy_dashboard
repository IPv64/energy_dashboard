upstream energy_dashboard {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    # for UNIX domain socket setups:
    #server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for TCP setups, point these to your backend servers
    server 127.0.0.1:8000 fail_timeout=0;
    # server 192.168.0.7:8080 fail_timeout=0;
    # server 192.168.0.8:8080 fail_timeout=0;
    # server 192.168.0.9:8080 fail_timeout=0;
}

server {
    # If no Host match, close the connection to prevent Host spoofing
    listen 80;
    return 444;
}

server {
    # listen 80 deferred; # for Linux
    # listen 80 accept_filter=httpready; # for FreeBSD
    listen 80;

    # set the correct host(s) for your site
    server_name energy.nldr.net;

    client_max_body_size 55m;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    access_log /var/log/nginx/energy_dashboard.access.log;
    error_log /var/log/nginx/energy_dashboard.error.log;

    location /media/ {
      # checks for static file, if not found proxy to app
      #try_files $uri @proxy_to_app;
    }

    location /static/ {
      # checks for static file, if not found proxy to app
      #try_files $uri @proxy_to_app;
      alias /var/www/energy_dashboard/static/;
    }

    location / {
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 10;
        proxy_read_timeout 10;
        proxy_pass http://localhost:8000/;
    }


    location @proxy_to_app {
      # an HTTP header important enough to have its own Wikipedia entry:
      #   http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if and only if you use HTTPS, this helps Rack
      # set the proper protocol for doing redirects:
      # proxy_set_header X-Forwarded-Proto https;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll stuff.  It's also safe to set if you're
      # using only serving fast clients with Unicorn + nginx.
      # Otherwise you _want_ nginx to buffer responses to slow
      # clients, really.
      # proxy_buffering off;

      # Try to serve static files from nginx, no point in making an
      # *application* server like Unicorn/Rainbows! serve static files.
      proxy_pass http://energy_dashboard;
    }
}


